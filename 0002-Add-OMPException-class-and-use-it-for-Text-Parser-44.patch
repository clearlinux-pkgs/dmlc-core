From ee773cd6ab2a32c07cf3f09ebaf9205ddf0a616e Mon Sep 17 00:00:00 2001
From: Anirudh Subramanian <anirudh2290@apache.org>
Date: Wed, 15 Aug 2018 14:23:08 -0700
Subject: [PATCH] Add OMPException class and use it for Text Parser (#445)

* Add OMPException class and use it for Text Parser

* Fix lint

* Add documentation for Rethrow and Run

* Fix lint

* Add documentation for OMPException

* Add more documentation

* Fix comments

* Change capture by value to capture by reference
---
 include/dmlc/common.h  | 36 +++++++++++++++++++++++++++++++
 src/data/text_parser.h | 49 ++++++++++++++++--------------------------
 2 files changed, 55 insertions(+), 30 deletions(-)

diff --git a/include/dmlc/common.h b/include/dmlc/common.h
index 54c235e..9aead8c 100644
--- a/include/dmlc/common.h
+++ b/include/dmlc/common.h
@@ -9,6 +9,8 @@
 #include <vector>
 #include <string>
 #include <sstream>
+#include <mutex>
+#include "./logging.h"
 
 namespace dmlc {
 /*!
@@ -44,6 +46,40 @@ inline size_t HashCombine<size_t>(size_t key, const size_t& value) {
   return key ^ (value + 0x9e3779b9 + (key << 6) + (key >> 2));
 }
 
+/*!
+ * \brief OMP Exception class catches, saves and rethrows exception from OMP blocks
+ */
+class OMPException {
+ private:
+  // exception_ptr member to store the exception
+  std::exception_ptr omp_exception_;
+  // mutex to be acquired during catch to set the exception_ptr
+  std::mutex mutex_;
+
+ public:
+  /*!
+   * \brief Parallel OMP blocks should be placed within Run to save exception
+   */
+  template <typename Function, typename... Parameters>
+  void Run(Function f, Parameters... params) {
+    try {
+      f(params...);
+    } catch (dmlc::Error &ex) {
+      std::lock_guard<std::mutex> lock(mutex_);
+      if (!omp_exception_) {
+        omp_exception_ = std::current_exception();
+      }
+    }
+  }
+
+  /*!
+   * \brief should be called from the main thread to rethrow the exception
+   */
+  void Rethrow() {
+    if (this->omp_exception_) std::rethrow_exception(this->omp_exception_);
+  }
+};
+
 }  // namespace dmlc
 
 #endif  // DMLC_COMMON_H_
diff --git a/src/data/text_parser.h b/src/data/text_parser.h
index 1d997ec..68ee552 100644
--- a/src/data/text_parser.h
+++ b/src/data/text_parser.h
@@ -9,6 +9,7 @@
 
 #include <dmlc/data.h>
 #include <dmlc/omp.h>
+#include <dmlc/common.h>
 #include <thread>
 #include <mutex>
 #include <vector>
@@ -100,10 +101,8 @@ class TextParserBase : public ParserImpl<IndexType, DType> {
   size_t bytes_read_;
   // source split that provides the data
   InputSplit *source_;
-  // exception_ptr to hold exception thrown in OMP threads
-  std::exception_ptr parser_exception_;
-  // mutex for the exception_ptr
-  std::mutex mutex_exception_;
+  // OMPException object to catch and rethrow exceptions in omp blocks
+  dmlc::OMPException omp_exc_;
 };
 
 // implementation
@@ -120,34 +119,24 @@ inline bool TextParserBase<IndexType, DType>::FillData(
   const char *head = reinterpret_cast<char *>(chunk.dptr);
 #pragma omp parallel num_threads(nthread)
   {
-    try {
-      // threadid
-      int tid = omp_get_thread_num();
-      size_t nstep = (chunk.size + nthread - 1) / nthread;
-      size_t sbegin = std::min(tid * nstep, chunk.size);
-      size_t send = std::min((tid + 1) * nstep, chunk.size);
-      const char *pbegin = BackFindEndLine(head + sbegin,
-                                           head);
-      const char *pend;
-      if (tid + 1 == nthread) {
-        pend = head + send;
-      } else {
-        pend = BackFindEndLine(head + send,
-                               head);
-      }
-      ParseBlock(pbegin, pend, &(*data)[tid]);
-    } catch (dmlc::Error& ex) {
-      {
-        std::lock_guard<std::mutex> lock(mutex_exception_);
-        if (!parser_exception_) {
-          parser_exception_ = std::current_exception();
-        }
-      }
+  omp_exc_.Run([&] {
+    // threadid
+    int tid = omp_get_thread_num();
+    size_t nstep = (chunk.size + nthread - 1) / nthread;
+    size_t sbegin = std::min(tid * nstep, chunk.size);
+    size_t send = std::min((tid + 1) * nstep, chunk.size);
+    const char *pbegin = BackFindEndLine(head + sbegin, head);
+    const char *pend;
+    if (tid + 1 == nthread) {
+      pend = head + send;
+    } else {
+      pend = BackFindEndLine(head + send, head);
     }
+    ParseBlock(pbegin, pend, &(*data)[tid]);
+  });
   }
-  if (parser_exception_) {
-    std::rethrow_exception(parser_exception_);
-  }
+  omp_exc_.Rethrow();
+
   this->data_ptr_ = 0;
   return true;
 }
-- 
2.22.0

